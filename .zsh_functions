# Create a new directory and enter it
# md is a default alias in oh-my-zsh
unalias md

function md() {
  mkdir -p "$@" && cd "$_";
}

# Change to the git root directory
function cdgitroot() {
  local cdup="$(git rev-parse --show-cdup)";
  test -n "$cdup" && cd "$cdup"
}


# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";

  zippedSize=$(
    stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
  );

  echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then     
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}     

# CATS
function catsay() {
  local input="${@}";
  local text=$(python -c "import sys, urllib as ul; print ul.quote('${input}');");
  curl --silent --output - "https://cataas.com/cat/says/${text}" | imgcat
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    subl .
  else
    subl "$@"
  fi
}

# `e` with no arguments opens the current directory in Visual studio Code, otherwise
# opens the given location
function e() {
  if [ $# -eq 0 ]; then
    code .
  else
    code "$@"
  fi
}

function jdk() {
  eval $(jdkman "$@");
}

# Offer merged branches for deletion
function git-delete-merged() {
  # list branches that are merged when viewed from the current branch or whatever branch is given as the first argument
  git branch --color=always --no-column --merged $1 |
  # only select branches that aren't special, i.e. checked out anywhere
  grep --regexp='^  ' |
  # remove the empty indicator columns
  cut -c 3- |
  # select any number of branches with a preview of what they are
  fzf-tmux -- --ansi --print0 --multi --preview="git log {} --" |
  # remove each branch with a prompt
  xargs -0 -p -n1 git branch --delete
}

# Less safe version of git-delete-merged
function git-delete-merged-force() {
  # list branches that are merged when viewed from the current branch or whatever branch is given as the first argument
  git branch --color=always --no-column --merged $1 |
  # only select branches that aren't special, i.e. checked out anywhere
  grep --regexp='^  ' |
  # remove the empty indicator columns
  cut -c 3- |
  # select any number of branches with a preview of what they are
  fzf-tmux -- --ansi --print0 --multi --preview="git log {} --" |
  # remove all in one go
  xargs -0 git branch --delete --force
}

# https://owen.cymru/fzf-ripgrep-navigate-with-bash-faster-than-ever-before-2/
fzf_log() {
  hash=$(git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" | fzf --ansi | awk '{print $1}')
  echo $hash | pbcopy
  git showtool $hash
}
